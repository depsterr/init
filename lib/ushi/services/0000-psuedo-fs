#!/bin/sh

. /usr/lib/ushi/libushi

mounted() {
    # This is a pure shell mountpoint implementation. We're dealing
    # with basic (and fixed/known) input so this doesn't need to
    # handle more complex cases.
    [ -e "$1" ]         || return 1
    [ -e /proc/mounts ] || return 1

    while read -r _ target _; do
        [ "$target" = "$1" ] && return 0
    done < /proc/mounts

    return 1
}

mnt() {
    # If the filesystem is already mounted, mount it again with
    # 'remount' so that it uses the correct mount options. This is
    # usually the case when dealing with an initramfs for example.
    mounted "$4" && set -- "remount,$1" "$2" "$3" "$4"

    mount -o "$1" -t "$2" "$3" "$4"
}

case "$1" in
    start)
        log "Mounting pseudo filesystems..."; {
            mnt nosuid,noexec,nodev    proc     proc /proc
            mnt nosuid,noexec,nodev    sysfs    sys  /sys
            mnt mode=0755,nosuid,nodev tmpfs    run  /run
            mnt mode=0755,nosuid       devtmpfs dev  /dev

            mkdir -p /run/runit /run/user /run/lock \
                     /run/log   /dev/pts  /dev/shm

            mnt mode=0620,gid=5,nosuid,noexec devpts devpts /dev/pts
            mnt mode=1777,nosuid,nodev        tmpfs  shm    /dev/shm

            # udev created these for us, however other device managers
            # don't. This is fine even when udev is in use.
            {
                ln -s /proc/self/fd /dev/fd
                ln -s fd/0          /dev/stdin
                ln -s fd/1          /dev/stdout
                ln -s fd/2          /dev/stderr
            } 2>/dev/null
        }
    ;;
    
    stop)
    ;;
esac
